var testFailed = 0;

var startTime = clock();

// Define a function to test equality
fun assertEquals(expected, actual) {
  var str = "Expected: " + toStr(expected) + " Actual: " + toStr(actual);
  print str;
  if (expected == actual) {
      print "Test PASSED";
  } 
  else {
    testFailed = testFailed + 1;
    print "Test FAILED";
  }
}

// Basic Arithmetic Tests
print "Testing Basic Arithmetic";
assertEquals(3, 1 + 2);
assertEquals(2, 4 / 2);
assertEquals(9, 3 * 3);
assertEquals(1, 3 - 2);

// Advanced Math Operations
print "";
print "Testing Advanced Math Operations";
assertEquals(10, (2 + 3) * ((10 / 2) - 3));

// Recursion Test
fun factorial(n) {
    if (n == 1) return 1;
    return n * factorial(n - 1);
}

fun iterativeFactorial(n) {
    var result = 1;
    while (n > 1) {
        result = result * n;
        n = n - 1;
    }
    return result;
}
print "";
print "Testing Recursion - Factorial Function";
for (var i = 1; i < 20; i = i + 1) {
    assertEquals(iterativeFactorial(i), factorial(i));
    assertEquals(iterativeFactorial(i), factorial(i));
    assertEquals(iterativeFactorial(i), factorial(i));
    assertEquals(iterativeFactorial(i), factorial(i));
}

// String Concatenation Test
print "";
print "Testing String Concatenation";
assertEquals("Hello, Lox!", "Hello, " + "Lox!");

// Function Call Test
fun add(a, b) {
    return a + b;
}
print "";
print "Testing Function Call";
assertEquals(15, add(10, 5));

// Conditional Test
fun testCondition(a) {
    if (a > 10) {
        return "Greater";
    } else {
        return "Lesser";
    }
}
print "";
print "Testing Conditional";
assertEquals("Lesser", testCondition(5));

// Logical Operators Test
print "";
print "Testing Logical Operators";
assertEquals(true, true and true);
assertEquals(false, true and false);
assertEquals(true, true or false);
assertEquals(false, false or false);

// Unary Operators Test
print "";
print "Testing Unary Operators";
assertEquals(-10, -10);
assertEquals(true, !false);

// While Loop Test
fun testWhileLoop() {
    var x = 0;
    var result = 0;
    while (x < 5) {
        result = result + x;
        x = x + 1;
    }
    return result;
}
print "";
print "Testing While Loop";
assertEquals(10, testWhileLoop());

// Closure Test
print "";
print "Testing Closure";
fun makeAdder(x) {
    fun add(y) {
        return x + y;
    }
    return add;
}
var addFive = makeAdder(5);
assertEquals(8, addFive(3));

if (testFailed > 0) {
    print "";
    print toStr(testFailed) + " tests FAILED";
} else {
  print "";
    print "**********************";
    print "***All Tests PASSED***";
    print "**********************";
}

var endTime = clock();

print "";
print "Total Time: " + toStr(endTime - startTime) + "ms";
